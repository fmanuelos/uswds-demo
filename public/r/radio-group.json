{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-group",
  "type": "registry:component",
  "title": "Radio Group",
  "description": "USWDS-compliant radio button group with proper accessibility and form integration.",
  "dependencies": [
    "clsx"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/radio-group.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst radioGroupVariants = cva(\"space-y-2\");\n\nconst radioItemVariants = cva(\n  cn(\n    // Base layout and appearance\n    \"flex items-center justify-center shrink-0 relative cursor-pointer\",\n    \"text-blue-60 border-none size-5 rounded-full\",\n\n    // Default ring state\n    \"ring-2 ring-offset-0 ring-gray-90\",\n\n    // Focus states\n    \"peer-focus:ring-2 peer-focus:ring-offset-0 peer-focus:ring-gray-90\",\n    \"peer-focus:outline peer-focus:outline-4 peer-focus:outline-offset-4 peer-focus:outline-blue-40\",\n\n    // Disabled states\n    \"peer-disabled:ring-gray-50 peer-disabled:cursor-not-allowed\",\n    \"peer-disabled:peer-checked:text-gray-50\",\n\n    // Checked states\n    \"peer-checked:ring-blue-60 peer-focus:peer-checked:ring-blue-60\",\n\n    // Before pseudo-element (radio dot)\n    \"before:size-4 before:rounded-full\",\n    \"peer-checked:before:bg-blue-60 peer-checked:peer-disabled:before:bg-gray-50\"\n  ),\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        tiled: \"top-0.5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst radioLabelVariants = cva(\n  \"pl-3 cursor-pointer block peer-disabled:text-gray-60 peer-disabled:cursor-not-allowed\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        tiled:\n          \"before:absolute before:-z-10 before:inset-0 before:bg-white before:border-2 before:border-gray-20 before:rounded peer-checked:before:border-blue-60 peer-checked:before:bg-blue-60/10 peer-disabled:before:border-gray-10 peer-disabled:before:bg-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\ninterface RadioGroupContextValue {\n  name?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n  variant?: \"default\" | \"tiled\";\n}\n\nconst RadioGroupContext = React.createContext<RadioGroupContextValue>({});\n\ninterface RadioGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof radioGroupVariants> {\n  name?: string;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  disabled?: boolean;\n  variant?: \"default\" | \"tiled\";\n}\n\nconst RadioGroup = React.forwardRef<HTMLDivElement, RadioGroupProps>(\n  (\n    {\n      className,\n      name,\n      value,\n      defaultValue,\n      onValueChange,\n      disabled,\n      variant = \"default\",\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [internalValue, setInternalValue] = React.useState(\n      defaultValue || \"\"\n    );\n    const currentValue = value !== undefined ? value : internalValue;\n\n    const handleValueChange = React.useCallback(\n      (newValue: string) => {\n        if (value === undefined) {\n          setInternalValue(newValue);\n        }\n        onValueChange?.(newValue);\n      },\n      [value, onValueChange]\n    );\n\n    const contextValue = React.useMemo(\n      () => ({\n        name,\n        value: currentValue,\n        onValueChange: handleValueChange,\n        disabled,\n        variant,\n      }),\n      [name, currentValue, handleValueChange, disabled, variant]\n    );\n\n    return (\n      <RadioGroupContext.Provider value={contextValue}>\n        <div\n          ref={ref}\n          className={cn(radioGroupVariants(), className)}\n          role=\"radiogroup\"\n          {...props}\n        >\n          {children}\n        </div>\n      </RadioGroupContext.Provider>\n    );\n  }\n);\nRadioGroup.displayName = \"RadioGroup\";\n\ninterface RadioGroupItemProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  value: string;\n  children?: React.ReactNode;\n}\n\nconst RadioGroupItem = React.forwardRef<HTMLInputElement, RadioGroupItemProps>(\n  ({ className, value, children, disabled: itemDisabled, ...props }, ref) => {\n    const {\n      name,\n      value: groupValue,\n      onValueChange,\n      disabled: groupDisabled,\n      variant,\n    } = React.useContext(RadioGroupContext);\n    const disabled = itemDisabled || groupDisabled;\n    const checked = groupValue === value;\n    const id = React.useId();\n\n    const handleChange = () => {\n      if (!disabled && onValueChange) {\n        onValueChange(value);\n      }\n    };\n\n    const labelClasses =\n      variant === \"tiled\" ? \"flex relative z-0 px-3 py-4\" : \"flex\";\n\n    return (\n      <label htmlFor={id} className={cn(labelClasses)}>\n        <input\n          ref={ref}\n          id={id}\n          type=\"radio\"\n          value={value}\n          name={name}\n          checked={checked}\n          disabled={disabled}\n          onChange={handleChange}\n          className=\"sr-only peer\"\n          {...props}\n        />\n        <div className={cn(radioItemVariants({ variant }), className)} />\n        {children && (\n          <div className={cn(radioLabelVariants({ variant }))}>{children}</div>\n        )}\n      </label>\n    );\n  }\n);\nRadioGroupItem.displayName = \"RadioGroupItem\";\n\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:component"
    }
  ]
}