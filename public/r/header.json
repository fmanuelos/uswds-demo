{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header",
  "type": "registry:block",
  "title": "Header",
  "description": "USWDS-compliant header block with navigation, search, and responsive design. Includes keyboard navigation and accessibility features.",
  "dependencies": [
    "clsx"
  ],
  "registryDependencies": [
    "button",
    "search"
  ],
  "files": [
    {
      "path": "src/components/blocks/Header/Header.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/Button/Button\"\nimport { Search } from \"@/components/ui/search\"\nimport { Dialog, DialogContent, DialogTrigger, DialogClose } from \"@/components/ui/dialog\"\nimport { Icon } from \"@/components/ui/Icon/Icon\"\n\n// Types for navigation structure\nexport interface NavigationItem {\n  label: string\n  href: string\n  isActive?: boolean\n  children?: NavigationItem[]\n}\n\nexport interface HeaderNavigation {\n  primary: NavigationItem[]\n  secondary?: NavigationItem[]\n}\n\n// Header variants\nconst headerVariants = cva(\n  \"bg-white border-b border-gray-cool-10\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        extended: \"border-b-0\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\n\n// Navigation dropdown component\nconst NavigationDropdown: React.FC<{\n  item: NavigationItem\n  isMobile?: boolean\n}> = ({ item, isMobile = false }) => {\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n  const dropdownRef = React.useRef<HTMLDivElement>(null)\n\n  // Keyboard navigation handler\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!item.children) return\n\n    switch (e.key) {\n      case 'Enter':\n      case ' ':\n        e.preventDefault()\n        if (!isOpen) {\n          setIsOpen(true)\n          setFocusedIndex(0)\n        } else if (focusedIndex >= 0) {\n          // Navigate to focused item\n          const focusedItem = item.children[focusedIndex]\n          if (focusedItem) {\n            window.location.href = focusedItem.href\n          }\n        }\n        break\n      case 'ArrowDown':\n        e.preventDefault()\n        if (!isOpen) {\n          setIsOpen(true)\n          setFocusedIndex(0)\n        } else if (item.children) {\n          setFocusedIndex(prev => \n            prev < item.children!.length - 1 ? prev + 1 : 0\n          )\n        }\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        if (!isOpen) {\n          setIsOpen(true)\n          setFocusedIndex(item.children ? item.children.length - 1 : 0)\n        } else if (item.children) {\n          setFocusedIndex(prev => \n            prev > 0 ? prev - 1 : item.children!.length - 1\n          )\n        }\n        break\n      case 'Escape':\n        e.preventDefault()\n        setIsOpen(false)\n        setFocusedIndex(-1)\n        buttonRef.current?.focus()\n        break\n      case 'Tab':\n        if (isOpen) {\n          setIsOpen(false)\n          setFocusedIndex(-1)\n        }\n        break\n    }\n  }\n\n  // Close dropdown and reset focus\n  const closeDropdown = () => {\n    setIsOpen(false)\n    setFocusedIndex(-1)\n  }\n\n  if (!item.children) {\n    return (\n      <a\n        href={item.href}\n        className={cn(\n          isMobile\n            ? \"block py-3 px-4 leading-none text-gray-60 hover:text-blue-60 hover:bg-gray-5 focus:outline focus:outline-4 focus:outline-blue-40\"\n            : cn(\n                \"relative p-4 flex font-bold text-gray-cool-60 focus:outline focus:outline-4 focus:outline-blue-40 hover:text-blue-60 hover:after:bg-blue-60  hover:after:absolute hover:after:-bottom-1 hover:after:inset-x-4 hover:after:h-1\",\n                item.isActive && \"after:bg-blue-60 after:absolute after:-bottom-1 after:inset-x-4 after:h-1\"\n              )\n        )}\n      >\n        {item.label}\n      </a>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <div className=\"border-t border-t-gray-10\">\n        <button\n          ref={buttonRef}\n          onClick={() => setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          className={cn(\n            \"text-left group relative flex items-center justify-between w-full py-3 pl-4 leading-none hover:bg-gray-5 focus:z-10 focus:outline focus:outline-4 focus:outline-blue-40 gap-3\",\n            item.isActive && \"font-bold after:block after:absolute after:bg-blue-60 after:inset-y-1 after:left-0 after:w-1 after:rounded-full\"\n          )}\n          aria-expanded={isOpen}\n        >\n          <span className={cn(\n            \"text-gray-60 group-hover:text-blue-60\",\n            item.isActive && \"text-blue-60\"\n          )}>\n            {item.label}\n          </span>\n          <span className=\"h-full flex items-center\">\n            <Icon \n              icon={isOpen ? \"remove\" : \"add\"} \n              size=\"sm\" \n              className=\"size-5\" \n            />\n          </span>\n        </button>\n        {isOpen && (\n          <ul>\n            {item.children.map((child, index) => (\n              <li key={index} className=\"border-t border-t-gray-10\">\n                <a\n                  href={child.href}\n                  className={cn(\n                    \"block py-2 pl-8 pr-4 text-gray-60 hover:text-blue-60 hover:bg-gray-5 focus:outline focus:outline-4 focus:outline-blue-40\",\n                    focusedIndex === index && \"bg-gray-5 text-blue-60\"\n                  )}\n                  onClick={closeDropdown}\n                >\n                  {child.label}\n                </a>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"relative\">\n      <button\n        ref={buttonRef}\n        onClick={() => setIsOpen(!isOpen)}\n        onKeyDown={handleKeyDown}\n        onBlur={() => setTimeout(() => closeDropdown(), 150)}\n        className={cn(\n          \"relative flex items-center gap-1 group p-4 font-bold text-gray-cool-60 focus:outline focus:outline-4 focus:outline-blue-40\",\n          isOpen && \"bg-blue-warm-80 text-white\",\n          item.isActive && !isOpen && \"after:bg-blue-60  after:absolute after:-bottom-1 after:inset-x-4 after:h-1\",\n          isOpen && \"after:hidden\"\n        )}\n        aria-expanded={isOpen}\n        aria-haspopup=\"menu\"\n      >\n        <span>{item.label}</span>\n        <div aria-hidden=\"true\" className=\"hidden lg:inline-flex\">\n          <Icon \n            icon={isOpen ? \"arrow_drop_up\" : \"arrow_drop_down\"} \n            size=\"xs\" \n            className=\"align-middle size-4\" \n          />\n        </div>\n      </button>\n      {isOpen && (\n        <div \n          ref={dropdownRef}\n          className=\"absolute outline-none z-10 bg-blue-warm-80 py-2 w-60 leading-snug\"\n          role=\"menu\"\n        >\n          {item.children.map((child, index) => (\n            <a\n              key={index}\n              href={child.href}\n              role=\"menuitem\"\n              className={cn(\n                \"flex text-white py-2 px-4 hover:underline focus:outline focus:outline-4 focus:-outline-offset-4 focus:outline-blue-40\",\n                focusedIndex === index && \"underline bg-blue-warm-70\"\n              )}\n              onClick={closeDropdown}\n            >\n              {child.label}\n            </a>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Desktop navigation component\nconst DesktopNavigation: React.FC<{\n  navigation: HeaderNavigation\n  onSearch?: (value: string) => void\n}> = ({ navigation, onSearch }) => (\n  <nav className=\"flex justify-end items-center pl-2 pb-1\">\n    <ul className=\"flex\">\n      {navigation.primary.map((item, index) => (\n        <li key={index} className=\"leading-none\">\n          <NavigationDropdown item={item} />\n        </li>\n      ))}\n    </ul>\n\n    <section aria-label=\"search component\">\n      <Search\n        iconOnly\n        onSearch={onSearch}\n        className=\"max-w-lg\"\n        inputProps={{\n          className: \"h-8 border-r-0\"\n        }}\n        buttonProps={{\n          className: \"h-8 px-3\"\n        }}\n      />\n    </section>\n  </nav>\n)\n\n// Mobile navigation component\nconst MobileNavigation: React.FC<{\n  navigation: HeaderNavigation\n  onSearch?: (value: string) => void\n}> = ({ navigation, onSearch }) => (\n  <div className=\"flex flex-col gap-6 pt-16 pb-4 px-4 bg-white w-60 fixed right-0 inset-y-0 overflow-auto\">\n    <DialogClose className=\"absolute top-0 right-0 size-12 flex items-center justify-center text-black bg-transparent focus:outline focus:outline-4 focus:-outline-offset-4 focus:outline-blue-40\" aria-label=\"Close\">\n      <Icon icon=\"close\" size=\"sm\" className=\"size-6\" />\n    </DialogClose>\n\n    <ul className=\"flex flex-col\">\n      {navigation.primary.map((item, index) => (\n        <li key={index}>\n          <NavigationDropdown item={item} isMobile />\n        </li>\n      ))}\n    </ul>\n\n    <div className=\"flex flex-col gap-4\">\n      {navigation.secondary && navigation.secondary.length > 0 && (\n        <ul>\n          {navigation.secondary.map((item, index) => (\n            <li key={index}>\n              <a\n                href={item.href}\n                className=\"text-gray-50 text-sm leading-1 hover:underline hover:text-blue-60 focus:outline focus:outline-4 focus:outline-blue-40\"\n              >\n                {item.label}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      <section aria-label=\"search component\">\n        <Search\n          onSearch={onSearch}\n          inputProps={{\n            className: \"bg-transparent h-8 border-r-0\"\n          }}\n          buttonProps={{\n            className: \"h-8 px-3\"\n          }}\n        />\n      </section>\n    </div>\n  </div>\n)\n\nexport interface HeaderProps\n  extends React.HTMLAttributes<HTMLElement>,\n    VariantProps<typeof headerVariants> {\n  projectTitle: string\n  projectTitleHref?: string\n  navigation: HeaderNavigation\n  onSearch?: (value: string) => void\n}\n\nconst Header = React.forwardRef<HTMLElement, HeaderProps>(\n  ({\n    className,\n    variant,\n    projectTitle,\n    projectTitleHref = \"/\",\n    navigation,\n    onSearch,\n    ...props\n  }, ref) => {\n    return (\n      <header\n        ref={ref}\n        className={cn(headerVariants({ variant }), className)}\n        {...props}\n      >\n        <div className=\"w-full\">\n          <div className={cn(\n            \"max-w-5xl flex mx-auto justify-between items-center border-b border-b-gray-cool-10 px-4\",\n            variant === \"extended\" ? \"lg:items-end lg:border-b-0\" : \"lg:items-end lg:border-b-0\"\n          )}>\n            {/* Project Title */}\n            <div className={cn(\n              \"lg:w-1/3 w-full\",\n              variant === \"extended\" ? \"lg:text-4xl lg:pt-8 lg:pb-6\" : \"lg:text-2xl lg:mt-8 lg:mb-4\"\n            )}>\n              <em className=\"font-bold not-italic\">\n                <a\n                  className=\"text-gray-90 focus:outline focus:outline-4 focus:outline-blue-40v\"\n                  href={projectTitleHref}\n                >\n                  {projectTitle}\n                </a>\n              </em>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <div className=\"lg:hidden\">\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button\n                    size=\"sm\"\n                    className=\"uppercase ml-auto leading-none text-white text-sm h-12 px-3 bg-blue-60v hover:bg-blue-warm-70v active:bg-blue-warm-80v focus:outline focus:outline-4 focus:outline-blue-40v\"\n                  >\n                    Menu\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"fixed z-50 inset-0 overflow-y-auto flex items-center justify-center p-4\">\n                  <MobileNavigation navigation={navigation} onSearch={onSearch} />\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Desktop Navigation - only show for default variant */}\n            {variant !== \"extended\" && (\n              <div className=\"hidden lg:flex ml-auto\">\n                <DesktopNavigation navigation={navigation} onSearch={onSearch} />\n              </div>\n            )}\n          </div>\n\n          {/* Extended variant navigation */}\n          {variant === \"extended\" && (\n            <div className=\"hidden lg:block border-t border-t-gray-cool-10\">\n              <DesktopNavigation navigation={navigation} onSearch={onSearch} />\n            </div>\n          )}\n        </div>\n      </header>\n    )\n  }\n)\n\nHeader.displayName = \"Header\"\n\nexport { Header, headerVariants }",
      "type": "registry:component"
    }
  ]
}