{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "search",
  "type": "registry:component",
  "title": "Search",
  "description": "USWDS-compliant search input component with proper accessibility and keyboard support.",
  "dependencies": [
    "clsx"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/search.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Icon } from \"./Icon/Icon\";\n\nconst searchInputVariants = cva(\n  cn(\n    // Layout classes\n    \"w-full max-w-lg border border-r-0 border-gray-60\",\n    // Focus states\n    \"focus:outline focus:outline-offset-0 focus:outline-4 focus:outline-blue-40\",\n    // Invalid states\n    \"data-[invalid]:ring-4 data-[invalid]:ring-red-60 data-[invalid]:border-transparent data-[invalid]:outline-offset-4\"\n  ),\n  {\n    variants: {\n      size: {\n        default: \"p-2 h-8 text-base\",\n        large: \"p-2 h-12 text-xl\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n    },\n  }\n);\n\nconst searchButtonVariants = cva(\n  \"rounded-r font-bold leading-none flex items-center justify-center text-white bg-blue-60 hover:bg-blue-warm-70 active:bg-blue-warm-80 focus:outline focus:outline-4 focus:outline-offset-4 focus:outline-blue-40\",\n  {\n    variants: {\n      size: {\n        default: \"px-4 h-8 text-base\",\n        large: \"px-8 h-12 text-xl\",\n      },\n      iconOnly: {\n        true: \"px-3\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n      iconOnly: false,\n    },\n  }\n);\n\nexport interface SearchProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"size\">,\n    VariantProps<typeof searchInputVariants> {\n  label?: string;\n  buttonText?: string;\n  onSearch?: (value: string) => void;\n  iconOnly?: boolean;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\nconst Search = React.forwardRef<HTMLInputElement, SearchProps>(\n  (\n    {\n      className,\n      size,\n      label = \"Search\",\n      buttonText = \"Search\",\n      onSearch,\n      iconOnly = false,\n      inputProps,\n      buttonProps,\n      ...props\n    },\n    ref\n  ) => {\n    const [searchValue, setSearchValue] = React.useState(\"\");\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      onSearch?.(searchValue);\n    };\n\n    const handleButtonClick = () => {\n      onSearch?.(searchValue);\n    };\n\n    // Extract className from inputProps and buttonProps, then merge with variants\n    const { className: inputClassName, ...restInputProps } = inputProps || {};\n    const { className: buttonClassName, ...restButtonProps } = buttonProps || {};\n\n    const inputClasses = cn(\n      searchInputVariants({ size }), \n      className, // Base className prop\n      inputClassName // className from inputProps\n    );\n\n    const buttonClasses = cn(\n      searchButtonVariants({ size, iconOnly }),\n      buttonClassName // className from buttonProps\n    );\n\n    return (\n      <div>\n        <label htmlFor={props.id || \"search\"} className=\"sr-only\">\n          {label}\n        </label>\n        <form onSubmit={handleSubmit}>\n          <div className=\"relative flex items-center\">\n            <input\n              id={props.id || \"search\"}\n              type=\"search\"\n              className={inputClasses}\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              ref={ref}\n              {...restInputProps} // Spread without className\n              {...props}\n            />\n            <button\n              type=\"submit\"\n              className={buttonClasses}\n              onClick={handleButtonClick}\n              aria-label={iconOnly ? \"search\" : undefined}\n              {...restButtonProps} // Spread without className\n            >\n              {iconOnly ? (\n                <Icon icon=\"search\" size=\"sm\" className=\"size-6\" />\n              ) : (\n                buttonText\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n);\n\nSearch.displayName = \"Search\";\n\nexport { Search, searchInputVariants, searchButtonVariants };\n",
      "type": "registry:component"
    }
  ]
}